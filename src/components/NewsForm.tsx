'use client'
import { useState } from 'react'
import { supabase } from '@/lib/supabase'

export default function NewsForm() {
  const [title, setTitle] = useState('')
  const [content, setContent] = useState('')
  const [category, setCategory] = useState('')
  const [image, setImage] = useState<File | null>(null)
  const [imageCaption, setImageCaption] = useState('')
  const [loading, setLoading] = useState(false)

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setImage(e.target.files[0])
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    
    if (!title || !content || !category) {
      alert('‡§∂‡•Ä‡§∞‡•ç‡§∑‡§ï, ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§î‡§∞ ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§≠‡§∞‡§®‡§æ ‡§ú‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à')
      setLoading(false)
      return
    }

    try {
      let imageUrl = null
      
      // Upload image if selected
      if (image) {
        const fileExt = image.name.split('.').pop()
        const fileName = `${Math.random()}.${fileExt}`
        const filePath = `news-images/${fileName}`

        const { error: uploadError } = await supabase.storage
          .from('news-images')
          .upload(filePath, image)

        if (uploadError) {
          console.error('Image upload error:', uploadError)
          alert('‡§§‡§∏‡•ç‡§µ‡•Ä‡§∞ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ: ' + uploadError.message)
          setLoading(false)
          return
        }

        // Get public URL
        const { data: { publicUrl } } = supabase.storage
          .from('news-images')
          .getPublicUrl(filePath)
        
        imageUrl = publicUrl
      }

      // Insert news article
      const { data, error } = await supabase
        .from('news_articles')
        .insert([{ 
          title, 
          content, 
          category,
          image_url: imageUrl,
          image_caption: imageCaption || null,
          created_at: new Date().toISOString()
        }])
        
      if (error) {
        console.error('Full Error:', error)
        alert('‡§ñ‡§¨‡§∞ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ: ' + (error.message || '‡§Ö‡§ú‡•ç‡§û‡§æ‡§§ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø'))
      } else {
        console.log('Success:', data)
        alert('‡§ñ‡§¨‡§∞ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§Ö‡§™‡§≤‡•ã‡§° ‡§π‡•ã ‡§ó‡§à!')
        // Clear form
        setTitle('')
        setContent('')
        setCategory('')
        setImage(null)
        setImageCaption('')
        // Reset file input
        const fileInput = document.getElementById('image-input') as HTMLInputElement
        if (fileInput) fileInput.value = ''
      }
    } catch (error) {
      console.error('Unexpected error:', error)
      alert('‡§ï‡•Å‡§õ ‡§ó‡§≤‡§§ ‡§π‡•Å‡§Ü ‡§π‡•à')
    }
    
    setLoading(false)
  }

  return (
    <div className="max-w-2xl mx-auto p-6 bg-white shadow-lg rounded-lg">
      <h2 className="text-3xl font-bold text-gray-800 mb-6 text-center">
        üì∞ ‡§®‡§à ‡§ñ‡§¨‡§∞ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
      </h2>
      
      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Title */}
        <div>
          <label className="block text-lg font-semibold text-gray-700 mb-2">
            ‡§∂‡•Ä‡§∞‡•ç‡§∑‡§ï (Headline)
          </label>
          <input
            type="text"
            placeholder="‡§ñ‡§¨‡§∞ ‡§ï‡§æ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∂‡•Ä‡§∞‡•ç‡§∑‡§ï ‡§≤‡§ø‡§ñ‡•á‡§Ç..."
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            required
            className="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none text-2xl font-bold"
          />
        </div>

        {/* Content */}
        <div>
          <label className="block text-lg font-semibold text-gray-700 mb-2">
            ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä (Content)
          </label>
          <textarea
            placeholder="‡§™‡•Ç‡§∞‡•Ä ‡§ñ‡§¨‡§∞ ‡§Ø‡§π‡§æ‡§Å ‡§≤‡§ø‡§ñ‡•á‡§Ç..."
            value={content}
            onChange={(e) => setContent(e.target.value)}
            rows={8}
            required
            className="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none text-lg leading-relaxed"
          />
        </div>

        {/* Category */}
        <div>
          <label className="block text-lg font-semibold text-gray-700 mb-2">
            ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä (Category)
          </label>
          <select 
            value={category} 
            onChange={(e) => setCategory(e.target.value)}
            required
            className="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none text-lg"
          >
            <option value="">‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§ö‡•Å‡§®‡•á‡§Ç</option>
            <option value="desh-videsh">‡§¶‡•á‡§∂-‡§µ‡§ø‡§¶‡•á‡§∂</option>
            <option value="vividha">‡§µ‡§ø‡§µ‡§ø‡§ß</option>
            <option value="aalekh">‡§Ü‡§≤‡•á‡§ñ</option>
            <option value="pratirodh">‡§™‡•ç‡§∞‡§§‡§ø‡§∞‡•ã‡§ß</option>
            <option value="lifestyle">‡§≤‡§æ‡§á‡§´-‡§∏‡•ç‡§ü‡§æ‡§á‡§≤</option>
            <option value="tech-world">‡§ü‡•á‡§ï-‡§µ‡§∞‡•ç‡§≤‡•ç‡§°</option>
          </select>
        </div>

        {/* Image Upload */}
        <div>
          <label className="block text-lg font-semibold text-gray-700 mb-2">
            üì∏ ‡§§‡§∏‡•ç‡§µ‡•Ä‡§∞ (Image) - ‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï
          </label>
          <input
            type="file"
            id="image-input"
            accept="image/*"
            onChange={handleImageChange}
            className="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
          />
          {image && (
            <p className="text-sm text-green-600 mt-2">
              ‚úÖ ‡§ö‡•Å‡§®‡•Ä ‡§ó‡§à ‡§´‡§æ‡§á‡§≤: {image.name}
            </p>
          )}
        </div>

        {/* Image Caption */}
        {image && (
          <div>
            <label className="block text-lg font-semibold text-gray-700 mb-2">
              ‡§§‡§∏‡•ç‡§µ‡•Ä‡§∞ ‡§ï‡§æ ‡§ï‡•à‡§™‡•ç‡§∂‡§® (Image Caption)
            </label>
            <input
              type="text"
              placeholder="‡§§‡§∏‡•ç‡§µ‡•Ä‡§∞ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Ç‡§ï‡•ç‡§∑‡§ø‡§™‡•ç‡§§ ‡§µ‡§ø‡§µ‡§∞‡§£..."
              value={imageCaption}
              onChange={(e) => setImageCaption(e.target.value)}
              className="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
            />
          </div>
        )}

        {/* Submit Button */}
        <button 
          type="submit"
          disabled={loading}
          className={`w-full py-4 px-6 rounded-lg text-white text-lg font-semibold transition-all ${
            loading 
              ? 'bg-gray-400 cursor-not-allowed' 
              : 'bg-blue-600 hover:bg-blue-700 hover:shadow-lg transform hover:scale-105'
          }`}
        >
          {loading ? '‚è≥ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...' : 'üì§ ‡§ñ‡§¨‡§∞ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç'}
        </button>
      </form>
    </div>
  )
}